@page "/pomodoro"
@using System.Text.Json
@using System.Timers
@rendermode InteractiveServer
@inject IWebHostEnvironment hostEnvironment
@inject IJSRuntime JSRuntime



<PageTitle>Pomodoro Timer</PageTitle>

<h1>Pomodoro Timer</h1>

<div>
    <p>Work Time: @workTime minutes</p>
    <p>Break Time: @breakTime minutes</p>
    <p role="status">Time Remaining: @DisplayTime</p>
</div>

<InputRadioGroup @bind-Value="timer25" TValue="bool">
    <InputRadio Value="@true" @onclick="OnRadioChange" disabled="@isRunning"/>Période 25 / 5 <br/>
    <InputRadio Value="@false" @onclick="OnRadioChange" disabled="@isRunning"/>Période 45 / 15 <br/>
</InputRadioGroup>

<button class="btn btn-primary" @onclick="StartTimer" disabled="@isRunning">Start</button>
<button class="btn btn-primary" @onclick="ResetTimer" disabled="@(!isRunning)">Reset</button>
<button class="btn btn-primary" @onclick="PauseTimer" disabled="@(!isRunning)">Pause</button>
<button class="btn btn-primary" @onclick="ResumeTimer" disabled="@(isRunning)">Resume</button>
<button class="btn btn-primary" @onclick="AppendToJson">End Session</button>


<div>
    <h2>Timer History</h2>
    <ul class="list-group">
        @foreach (var session in timerHistory)
        {
            <li class="list-group-item">Session @session.StartDate : @($"{session.Minutes:00}:{session.Seconds:00}") écoulées</li>
        }
    </ul>
</div>

@code {
    private readonly int workTime25 = 25;
    private readonly int breakTime25 = 5;
    private readonly int workTime45 = 45;
    private readonly int breakTime45 = 15;
    private string startDate;
    private int workTime = 25;
    private int breakTime = 5;
    private bool isWorking = true;
    private int minutes = 25;
    private int seconds;
    private bool isRunning;
    private bool timer25 = true;
    private readonly List<TimerSessionData> timerHistory = new();
    private Timer timer;

    private string DisplayTime => $"{minutes:00}:{seconds:00}";

    protected override async Task OnInitializedAsync()
    {
        timer = new Timer(1000);
        timer.Elapsed += TimerElapsed;
        await base.OnInitializedAsync();
    }

    private async Task ExportToJson()
    {
        var json = JsonSerializer.Serialize(timerHistory);

        var wwwRootPath = hostEnvironment.WebRootPath;

        var filePath = Path.Combine(wwwRootPath, "timer_history.json");

        await File.WriteAllTextAsync(filePath, json);
    }
    
    private async Task AppendToJson()
    {
        // Read existing JSON data from file
        var filePath = Path.Combine(hostEnvironment.WebRootPath, "timer_history.json");
        string existingJson = await File.ReadAllTextAsync(filePath);

        // Deserialize existing JSON data to a list
        List<TimerSessionData> existingData = JsonSerializer.Deserialize<List<TimerSessionData>>(existingJson);

        // Append new data to the existing list
        existingData.AddRange(timerHistory);

        // Serialize the combined data back to JSON
        string combinedJson = JsonSerializer.Serialize(existingData);

        // Write the combined JSON data back to the file, overwriting the existing content
        await File.WriteAllTextAsync(filePath, combinedJson);
        
        await JSRuntime.InvokeVoidAsync("location.reload");

    }
    
    private void OnRadioChange()
    {
        if (!timer25)
        {
            workTime = workTime25;
            minutes = workTime25;
            breakTime = breakTime25;
        }
        else
        {
            workTime = workTime45;
            minutes = workTime45;
            breakTime = breakTime45;
        }
    }

    private void StartTimer()
    {
        if (!isRunning)
        {
            isRunning = true;
            timer.Start();
            StateHasChanged(); // Trigger UI update
        }
    }

    private void ResetTimer()
    {
        timer.Stop();
        isRunning = false;
        minutes = workTime;
        seconds = 0;
        StateHasChanged(); // Trigger UI update
    }

    private void PauseTimer()
    {
        if (isRunning)
        {
            timer.Stop(); // Stop the timer
            isRunning = false; // Update the running flag
            StateHasChanged(); // Trigger UI update
        }
    }

    private void ResumeTimer()
    {
        if (!isRunning)
        {
            timer.Start(); // Start the timer
            isRunning = true; // Update the running flag
            StateHasChanged(); // Trigger UI update
        }
    }


    private async void TimerElapsed(object sender, ElapsedEventArgs e)
    {
        if (seconds == 0)
        {
            if (minutes == 0)
            {
                timer.Stop();
                isRunning = false;
                if (isWorking)
                {
                    isWorking = false;
                    startDate = DateTime.Now.ToString("yyyy-MM-dd HH:mm:ss");
                    timerHistory.Add(new TimerSessionData { StartDate = startDate, Minutes = workTime, Seconds = seconds });
                }
                else
                {
                    isWorking = true;
                }

                seconds = 0;
                await InvokeAsync(StateHasChanged); // Ensure UI update on UI thread
                return;
            }

            minutes--;
            seconds = 59;
        }
        else
        {
            seconds--;
        }


        await InvokeAsync(StateHasChanged); // Ensure UI update on UI thread
    }

    public class TimerSessionData
    {
        public string StartDate { get; set; } // New property for start date
        public int Minutes { get; set; }
        public int Seconds { get; set; }
        
    }

}